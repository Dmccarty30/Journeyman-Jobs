/**
 * Validation tests for scraper corrections
 * 
 * This file contains tests to validate the corrections made to the scrapers:
 * 1. Document IDs contain employer
 * 2. Table boundary validation works correctly
 * 3. Local 226 field mappings are correct
 * 4. Local 125 invalid document is removed
 * 5. Local 77 missing job is added
 * 
 * Run with: node validation_tests.js
 */

const { Firestore } = require('@google-cloud/firestore');
const path = require('path');
const assert = require('assert').strict;
const { isInTable, generateJobId } = require('./jobCrud');

// Set the environment variable for Google Cloud credentials
process.env.GOOGLE_APPLICATION_CREDENTIALS = path.resolve(__dirname, './config/firebase_config.json');

// Firestore initialization
const firebaseConfig = {
  projectId: 'journeyman-jobs',
  keyFilename: path.resolve(__dirname, './config/firebase_config.json')
};

const db = new Firestore(firebaseConfig);

/**
 * Tests that document IDs contain employer
 * @returns {Promise<void>}
 */
async function testDocumentIDsContainEmployer() {
  console.log('\nTesting document IDs contain employer...');
  
  // Get a sample of jobs
  const snapshot = await db
    .collection('jobs')
    .limit(20)
    .get();
  
  let passCount = 0;
  let failCount = 0;
  
  for (const doc of snapshot.docs) {
    const docId = doc.id;
    const idParts = docId.split('-');
    
    if (idParts.length >= 3) {
      console.log(`✓ Document ID ${docId} has correct format`);
      passCount++;
    } else {
      console.log(`✗ Document ID ${docId} is missing employer`);
      failCount++;
    }
  }
  
  console.log(`Results: ${passCount} passed, ${failCount} failed`);
  assert.strictEqual(failCount, 0, 'Some document IDs are missing employer');
}

/**
 * Tests that table boundary validation works correctly
 * @returns {Promise<void>}
 */
async function testTableBoundaryValidation() {
  console.log('\nTesting table boundary validation...');
  
  // Test cases
  const testCases = [
    {
      job: {
        requestDate: '01/01/2025',
        startDate: '01/15/2025',
        comments: 'Valid job'
      },
      expected: true,
      description: 'Valid job with dates and normal comments'
    },
    {
      job: {
        requestDate: '',
        startDate: '01/15/2025',
        comments: 'Missing request date'
      },
      expected: false,
      description: 'Invalid job missing request date'
    },
    {
      job: {
        requestDate: '01/01/2025',
        startDate: '',
        comments: 'Missing start date'
      },
      expected: false,
      description: 'Invalid job missing start date'
    },
    {
      job: {
        requestDate: '01/01/2025',
        startDate: '01/15/2025',
        comments: 'GENERATED BY SYSTEM'
      },
      expected: false,
      description: 'Invalid job with GENERATED in comments'
    }
  ];
  
  let passCount = 0;
  let failCount = 0;
  
  for (const testCase of testCases) {
    const result = isInTable(testCase.job);
    
    if (result === testCase.expected) {
      console.log(`✓ ${testCase.description}: isInTable returned ${result}`);
      passCount++;
    } else {
      console.log(`✗ ${testCase.description}: isInTable returned ${result}, expected ${testCase.expected}`);
      failCount++;
    }
  }
  
  console.log(`Results: ${passCount} passed, ${failCount} failed`);
  assert.strictEqual(failCount, 0, 'Table boundary validation failed some test cases');
}

/**
 * Tests that Local 125 invalid document is removed
 * @returns {Promise<void>}
 */
async function testLocal125InvalidDocRemoved() {
  console.log('\nTesting Local 125 invalid document is removed...');
  
  const docRef = db.collection('locals').doc('125-line_clearance_tree_trimming-STORM_CALLS');
  const doc = await docRef.get();
  
  if (!doc.exists) {
    console.log('✓ Invalid Local 125 document has been removed');
  } else {
    console.log('✗ Invalid Local 125 document still exists');
    assert.fail('Invalid Local 125 document still exists');
  }
}

/**
 * Tests that Local 77 missing job is added
 * @returns {Promise<void>}
 */
async function testLocal77MissingJobAdded() {
  console.log('\nTesting Local 77 missing job is added...');
  
  // Query for the specific job
  const snapshot = await db
    .collection('jobs')
    .where('localNumber', '==', '77')
    .where('employer', '==', 'ASPLUNDH TREE EXPERT, LLC')
    .where('jobClass', '==', 'JRY TREE TRMR')
    .get();
  
  if (!snapshot.empty) {
    console.log('✓ Missing Local 77 job has been added');
  } else {
    console.log('✗ Missing Local 77 job was not found');
    assert.fail('Missing Local 77 job was not found');
  }
}

/**
 * Main test function
 */
async function runTests() {
  try {
    console.log('Starting validation tests...');
    
    // Run tests
    await testDocumentIDsContainEmployer();
    await testTableBoundaryValidation();
    await testLocal125InvalidDocRemoved();
    await testLocal77MissingJobAdded();
    
    console.log('\nAll tests passed successfully!');
  } catch (error) {
    console.error('\nTests failed:', error.message);
    process.exit(1);
  }
}

// Run the tests if executed directly
if (require.main === module) {
  runTests()
    .then(() => console.log('Validation tests completed'))
    .catch(err => {
      console.error('Validation tests failed:', err);
      process.exit(1);
    });
}

module.exports = { runTests };