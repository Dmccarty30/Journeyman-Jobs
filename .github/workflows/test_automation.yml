name: Test Automation - IBEW Electrical Workforce Platform

on:
  push:
    branches: [ main, develop, gitbutler/workspace ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Static Analysis and Linting
  static_analysis:
    name: Static Analysis & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: dart analyze --fatal-infos
      
    - name: Check for unused dependencies
      run: dart pub deps --style=compact
      
    - name: Generate code (Riverpod, Mockito)
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Verify generated code is up to date
      run: |
        if ! git diff --quiet; then
          echo "Generated code is out of date. Please run 'dart run build_runner build --delete-conflicting-outputs' and commit the changes."
          git diff
          exit 1
        fi

  # Unit Tests
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: static_analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Run unit tests
      run: |
        flutter test \
          test/unit/ \
          test/data/ \
          test/domain/ \
          test/services/ \
          test/utils/ \
          --coverage \
          --test-randomize-ordering-seed=random \
          --reporter=github
          
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unit_tests
        name: unit-tests-coverage

  # Widget Tests
  widget_tests:
    name: Widget Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: static_analysis
    
    strategy:
      matrix:
        test_group:
          - presentation/widgets
          - presentation/screens
          - features/crews/widgets
          - features/job_sharing/widgets
          - widgets
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Run widget tests for ${{ matrix.test_group }}
      run: |
        flutter test \
          test/${{ matrix.test_group }}/ \
          --coverage \
          --test-randomize-ordering-seed=random \
          --reporter=github
          
    - name: Upload widget test coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: widget_tests_${{ matrix.test_group }}
        name: widget-tests-${{ matrix.test_group }}-coverage

  # Integration Tests
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit_tests, widget_tests]
    
    services:
      # Firebase Emulator Suite
      firebase-emulator:
        image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
        ports:
          - 8080:8080  # Firestore
          - 5001:5001  # Functions
          - 9099:9099  # Auth
        options: >-
          --health-cmd "curl -f http://localhost:8080 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Start Firebase Emulators
      run: |
        firebase emulators:start --only firestore,auth,functions --project demo-journeyman-jobs &
        sleep 10
        
    - name: Run integration tests
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8080
        FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
        FUNCTIONS_EMULATOR_HOST: localhost:5001
      run: |
        flutter test \
          test/integration/ \
          test/features/crews/integration/ \
          test/features/job_sharing/integration/ \
          --coverage \
          --test-randomize-ordering-seed=random \
          --reporter=github
          
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: integration_tests
        name: integration-tests-coverage
        
    - name: Stop Firebase Emulators
      run: firebase emulators:stop --project demo-journeyman-jobs
      if: always()

  # Performance Tests
  performance_tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: integration_tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Run performance tests
      run: |
        flutter test \
          test/performance/ \
          --reporter=github \
          --timeout=60s
          
    - name: Generate performance report
      run: |
        echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Performance tests completed successfully" >> $GITHUB_STEP_SUMMARY

  # Security Tests
  security_tests:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: static_analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run security audit
      run: |
        # Check for known vulnerabilities in dependencies
        flutter pub deps --json | grep -E '"name"|"version"' || true
        
        # Check for hardcoded secrets (basic patterns)
        grep -r -E "(password|secret|token|key)\s*[:=]\s*['\"][^'\"]+['\"]" lib/ || echo "No hardcoded secrets found"
        
        # Check Firebase configuration
        if [ -f "lib/config/firebase_config.dart" ]; then
          echo "Checking Firebase configuration security..."
          grep -E "(api_key|project_id)" lib/config/firebase_config.dart || true
        fi
        
    - name: IBEW Data Privacy Check
      run: |
        # Check for potential PII logging
        echo "Checking for potential PII in logging statements..."
        grep -r -E "(ssn|social.security|ticket.number|ibew.number)" lib/ || echo "No obvious PII logging found"
        
        # Check for proper data encryption patterns
        echo "Checking for encryption usage..."
        grep -r -E "(encrypt|cipher|hash)" lib/ || echo "Verify encryption is implemented where needed"

  # IBEW Electrical Industry Compliance Tests
  ibew_compliance_tests:
    name: IBEW Industry Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: integration_tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Test IBEW Local Directory (797 locals)
      run: |
        echo "Testing IBEW Local directory compliance..."
        flutter test test/features/locals/ --reporter=github
        
    - name: Test Electrical Classifications
      run: |
        echo "Testing electrical worker classifications..."
        # Verify all required IBEW classifications are supported
        grep -r "Inside Wireman\|Journeyman Lineman\|Tree Trimmer\|Equipment Operator" lib/ || echo "Warning: Check classification coverage"
        
    - name: Test Storm Work Features
      run: |
        echo "Testing storm work emergency response features..."
        flutter test test/features/crews/integration/ --name="storm" --reporter=github || true
        
    - name: Test Crew Size Limits
      run: |
        echo "Testing crew size compliance (max 10 members)..."
        grep -r "member_limit.*10\|memberLimit.*10" lib/ || echo "Verify crew size limits"
        
    - name: Test Job Sharing Viral Features
      run: |
        echo "Testing viral job sharing features..."
        flutter test test/features/job_sharing/ --reporter=github

  # Coverage Report
  coverage_report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit_tests, widget_tests, integration_tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        path: coverage-reports
        
    - name: Generate combined coverage report
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | [![codecov](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.ref_name }}/graph/badge.svg?flag=unit_tests)](https://codecov.io/gh/${{ github.repository }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Widget Tests | [![codecov](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.ref_name }}/graph/badge.svg?flag=widget_tests)](https://codecov.io/gh/${{ github.repository }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | [![codecov](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.ref_name }}/graph/badge.svg?flag=integration_tests)](https://codecov.io/gh/${{ github.repository }}) |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### IBEW Platform Specific Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ IBEW Local Directory (797 locals)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Electrical Worker Classifications" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Storm Work Emergency Response" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Crew Management (max 10 members)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Viral Job Sharing Features" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Contact Integration & User Detection" >> $GITHUB_STEP_SUMMARY

  # Notification on Failure
  notify_on_failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [static_analysis, unit_tests, widget_tests, integration_tests, performance_tests, security_tests, ibew_compliance_tests]
    if: failure()
    
    steps:
    - name: Create Issue on Test Failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Test Suite Failure - ${context.workflow} #${context.runNumber}`;
          const body = `
          ## Test Suite Failure Report
          
          **Workflow:** ${context.workflow}
          **Run Number:** ${context.runNumber}
          **Branch:** ${context.ref}
          **Commit:** ${context.sha}
          **Actor:** ${context.actor}
          
          ### Failed Jobs
          Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
          
          ### IBEW Platform Impact
          This failure may affect:
          - ⚡ Electrical worker job matching
          - 👥 Crew management and formation
          - 📱 Viral job sharing features
          - 🏢 IBEW Local directory (797 locals)
          - 🌪️ Storm work emergency response
          
          **Priority:** High - Electrical workforce platform stability
          
          /cc @maintainers
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title,
            body,
            labels: ['bug', 'test-failure', 'high-priority', 'ibew-platform']
          });
