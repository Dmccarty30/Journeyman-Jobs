{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(uv:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(npm:*)",
      "Bash(ls:*)",
      "Bash(cp:*)",
      "Write",
      "Edit",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(git rev-parse:*)",
      "Bash(feature_desc=\"New Feature\")",
      "Bash(branch_name=\"001-new-feature\")",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(./.specify/scripts/bash/create-new-feature.sh:*)",
      "Bash(bash:*)",
      "Bash(sed:*)",
      "Bash(.specify/scripts/powershell/create-new-feature.ps1 -Json \"This feature provides a central hub of communication between users. Especially the user''s who travel together. The ones that do travel together often do so because they can slightly tolerate each other but more importantly, they share the same job and work preferences. So, that means that they ''Tramp'' together, or travel. When one finds a plausible job, they will notify the other guys about the job, then they all bid for it and most of the time get it because they onboard as an entire crew. Which employers like because they get along with each other, they are more dependable, etc. So this feature, ''Crews'' is exactly that reflected through my app.\")",
      "Bash(/mnt/c/Users/david/Desktop/Journeyman-Jobs/.specify/scripts/bash/create-new-feature.sh \"This feature provides a central hub of communication between users. Especially the user''s who travel together. The ones that do travel together often do so because they can slightly tolerate each other but more importantly, they share the same job and work preferences. So, that means that they ''Tramp'' together, or travel. When one finds a plausible job, they will notify the other guys about the job, then they all bid for it and most of the time get it because they onboard as an entire crew. Which employers like because they get along with each other, they are more dependable, etc. So this feature, ''Crews'' is exactly that reflected through my app.\")",
      "Bash(/mnt/c/Users/david/Desktop/Journeyman-Jobs/.specify/scripts/bash/create-new-feature.sh:*)",
      "WebFetch(domain:)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false,
  "enabledMcpjsonServers": [
    "mcp-server-fetch",
    "universal_mcp",
    "firecrawl-mcp",
    "sequential-thinking",
    "think-mcp-server"
  ],
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 scripts/quality_checks/pre_edit_validation.py",
            "timeout": 5000
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "python3 scripts/quality_checks/pre_write_validation.py",
            "timeout": 5000
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "python3 scripts/quality_checks/post_change_validation.py",
            "timeout": 10000
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python3 scripts/quality_checks/prompt_enhancement.py",
            "timeout": 3000
          }
        ]
      }
    ]
  },
  "disableAllHooks": false,
  "outputStyle": "default",
  "quality_enforcement": {
    "enabled": true,
    "strictness": "medium",
    "auto_fix": false,
    "report_only": false,
    "config_file": "scripts/quality_checks/quality_config.yaml"
  },
  "electrical_theme": {
    "enforce_backgrounds": true,
    "required_colors": [
      "primaryNavy",
      "accentCopper"
    ],
    "electrical_components": {
      "mandatory_screens": [
        "splash",
        "home",
        "jobs",
        "locals"
      ],
      "background_requirement": "CircuitPatternBackground or ElectricalBackground"
    }
  },
  "architecture": {
    "state_management": "riverpod",
    "forbidden_patterns": [
      "Provider",
      "setState_in_complex_widgets"
    ],
    "required_patterns": [
      "ConsumerWidget",
      "ConsumerStatefulWidget"
    ],
    "import_organization": {
      "flutter_first": true,
      "external_packages": true,
      "internal_relative": true
    }
  }
}