{
  "env": {
    "CLAUDE_FLOW_AUTO_COMMIT": "false",
    "CLAUDE_FLOW_AUTO_PUSH": "false",
    "CLAUDE_FLOW_HOOKS_ENABLED": "true",
    "CLAUDE_FLOW_TELEMETRY_ENABLED": "true",
    "CLAUDE_FLOW_REMOTE_EXECUTION": "true",
    "CLAUDE_FLOW_CHECKPOINTS_ENABLED": "true",
    "ANTHROPIC_AUTH_TOKEN": "5f0dcf113531405b9f379038f4bd0677.kj5qyVcN3ruPw8Wt",
    "ANTHROPIC_BASE_URL": "https://api.z.ai/api/anthropic",
    "ANTHROPIC_DEFAULT_HAIKU_MODEL": "glm-4.5-air",
    "ANTHROPIC_DEFAULT_SONNET_MODEL": "glm-4.6",
    "ANTHROPIC_DEFAULT_OPUS_MODEL": "glm-4.6"
  },
  "includeCoAuthoredBy": true,
  "permissions": {
    "allow": [
      "Bash(npx claude-flow:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(git status)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push)",
      "Bash(git config:*)",
      "Bash(git tag:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(jq:*)",
      "Bash(node:*)",
      "Bash(which:*)",
      "Bash(pwd)",
      "Bash(ls:*)",
      "Bash(flutter analyze:*)",
      "Bash(cat:*)",
      "Bash(python3:*)",
      "Bash(find:*)",
      "Bash(dir:*)",
      "Bash(findstr:*)",
      "Bash(flutter pub deps:*)",
      "Bash(chmod:*)",
      "mcp__claude-flow__agents_spawn_parallel",
      "mcp__claude-flow__workflow_create",
      "mcp__claude-flow__workflow_execute",
      "mcp__claude-flow__task_status",
      "mcp__claude-flow__task_results",
      "mcp__claude-flow__swarm_status",
      "Bash(./.claude/workflows/universal-code-correction-cli.sh:*)",
      "Bash(./.claude/workflows/run-directory-analysis.sh:*)",
      "Bash(./.claude/workflows/run-directory-analysis-v2.sh:*)",
<<<<<<< HEAD
      "Bash(reports/test-permission)",
      "Bash(logs/test-permission)",
      "Bash(workflows/test-permission)",
      "Read(//d/**)",
      "mcp__ruv-swarm__swarm_init",
      "mcp__ruv-swarm__agent_spawn",
      "mcp__flow-nexus__swarm_init"
=======
      "Bash(mkdir:*)",
      "Bash(flutter build web:*)",
      "Bash(flutter test:*)",
      "Bash(npx claude-flow@alpha hive-mind spawn:*)",
      "mcp__flow-nexus__swarm_init",
      "mcp__flow-nexus__auth_init",
      "mcp__ruv-swarm__swarm_init",
      "mcp__ruv-swarm__agent_spawn",
      "mcp__ruv-swarm__swarm_status",
      "mcp__claude-flow_alpha__swarm_init",
      "mcp__claude-flow_alpha__agents_spawn_parallel",
      "mcp__claude-flow_alpha__swarm_status",
      "mcp__claude-flow_alpha__task_orchestrate",
      "Bash(flutter pub get:*)",
      "Bash(flutter build:*)",
      "Bash(flutter pub:*)",
      "Bash(flutter doctor:*)"
>>>>>>> acef1cd0f89023c0148524cac5f4f08fa32e2337
    ],
    "deny": [
      "Bash(rm -rf /)"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "claude-flow@alpha",
    "ruv-swarm",
    "flow-nexus",
    "agentic-payments"
  ],
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-command --command '{}' --validate-safety true --prepare-resources true"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks pre-edit --file '{}' --auto-assign-agents true --load-context true"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.command // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-command --command '{}' --track-metrics true --store-results true"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "cat | jq -r '.tool_input.file_path // .tool_input.path // empty' | tr '\\n' '\\0' | xargs -0 -I {} npx claude-flow@alpha hooks post-edit --file '{}' --format true --update-memory true"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "manual",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'INPUT=$(cat); CUSTOM=$(echo \"$INPUT\" | jq -r \".custom_instructions // \\\"\\\"\"); echo \"ðŸ”„ PreCompact Guidance:\"; echo \"ðŸ“‹ IMPORTANT: Review CLAUDE.md in project root for:\"; echo \"   â€¢ 54 available agents and concurrent usage patterns\"; echo \"   â€¢ Swarm coordination strategies (hierarchical, mesh, adaptive)\"; echo \"   â€¢ SPARC methodology workflows with batchtools optimization\"; echo \"   â€¢ Critical concurrent execution rules (GOLDEN RULE: 1 MESSAGE = ALL OPERATIONS)\"; if [ -n \"$CUSTOM\" ]; then echo \"ðŸŽ¯ Custom compact instructions: $CUSTOM\"; fi; echo \"âœ… Ready for compact operation\"'"
          }
        ]
      },
      {
        "matcher": "auto",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash -c 'echo \"ðŸ”„ Auto-Compact Guidance (Context Window Full):\"; echo \"ðŸ“‹ CRITICAL: Before compacting, ensure you understand:\"; echo \"   â€¢ All 54 agents available in .claude/agents/ directory\"; echo \"   â€¢ Concurrent execution patterns from CLAUDE.md\"; echo \"   â€¢ Batchtools optimization for 300% performance gains\"; echo \"   â€¢ Swarm coordination strategies for complex tasks\"; echo \"âš¡ Apply GOLDEN RULE: Always batch operations in single messages\"; echo \"âœ… Auto-compact proceeding with full agent context\"'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "npx claude-flow@alpha hooks session-end --generate-summary true --persist-state true --export-metrics true"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": ".claude/statusline-command.sh"
  }
}
