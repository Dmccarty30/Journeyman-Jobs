rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection: Users can read their own profile or if they are a foreman (RBAC via user role)
    // Write only to own profile
    match /users/{userId} {
      // Helper function to check if user is a foreman (only check if document exists)
      function isForeman() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'foreman';
      }

      // Allow read for own profile or if foreman
      allow read: if request.auth != null &&
        (request.auth.uid == userId || isForeman());
      
      // Allow creation of own profile during signup/onboarding
      allow create: if request.auth != null && 
                   request.auth.uid == userId;
      
      // Allow updates to own profile
      allow update: if request.auth != null && 
                   request.auth.uid == userId;
      
      // Allow deletion of own profile
      allow delete: if request.auth != null && 
                   request.auth.uid == userId;
    }

    // Crews collection: Access restricted to crew members and foreman
    match /crews/{crewId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid in resource.data.memberIds || request.auth.uid == resource.data.foremanId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.foremanId;
    }

    // FeedPosts subcollection under crews: Read/create for crew members, update/delete for author or foreman
    match /crews/{crewId}/feedPosts/{postId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/crews/$(crewId)).data.memberIds;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/crews/$(crewId)).data.memberIds;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         request.auth.uid == get(/databases/$(database)/documents/crews/$(crewId)).data.foremanId);
    }

    // Jobs collection: Public jobs visible to all authenticated users
    // Private/crew jobs visible only to crew members/foreman
    match /jobs/{jobId} {
      allow read: if request.auth != null && (
        // Allow reading public jobs
        !resource.data.crewId ||
        // Or if user is part of the crew
        (resource.data.crewId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.crewIds) ||
        // Or if user is the foreman of the crew
        (resource.data.crewId && request.auth.uid == get(/databases/$(database)/documents/crews/$(resource.data.crewId)).data.foremanId)
      );
      
      // Allow creation for authenticated users
      allow create: if request.auth != null;
      
      // Allow updates/deletes for job author or crew foreman
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.authorId || 
        (resource.data.crewId && request.auth.uid == get(/databases/$(database)/documents/crews/$(resource.data.crewId)).data.foremanId)
      );
    }

    // Conversations collection: Access for participants
    match /conversations/{convId} {
      allow read, update: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null;
    }

    // Messages subcollection under conversations: Read for participants, create for sender (participant), 
    // update/delete for author
    match /conversations/{convId}/messages/{msgId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    // Locals: Public read-only
    match /locals/{localId} {
      allow read: if true;
      allow write: if false;
    }

    // Counters: Authenticated users can read/write their own or global counters
    match /counters/{document=**} {
      allow read, write: if request.auth != null;
      allow delete: if false;
    }
  }
}