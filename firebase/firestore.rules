rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Jobs collection - read-only for authenticated users
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin through Cloud Functions
    }
    
    // Locals collection - read-only for all users (public information)
    match /locals/{localId} {
      allow read: if true;
      allow write: if false; // Only admin through Cloud Functions
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'uid']) &&
                       request.resource.data.uid == userId;
      allow update: if isOwner(userId) &&
                       request.resource.data.uid == resource.data.uid && // Can't change UID
                       request.resource.data.email == resource.data.email; // Can't change email through direct write
      allow delete: if false; // Users can't delete their account directly
    }
    
    // Test collection - for development only
    match /test/{document=**} {
      allow read, write: if isAuthenticated();
    }
    
    // Crews collection - role-based access control
    match /crews/{crewId} {
      // Read: Only crew members can read crew data
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid));
      
      // Create: Only authenticated users can create crews
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['name', 'foremanId', 'memberIds', 'preferences', 'createdAt', 'isActive']) &&
        request.resource.data.foremanId == request.auth.uid &&
        request.resource.data.memberIds.hasAny([request.auth.uid]);
      
      // Update: Only foremen can update crew info
      allow update: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman' &&
        request.resource.data.foremanId == resource.data.foremanId && // Can't change foreman through this rule
        request.resource.data.id == resource.data.id; // Can't change crew ID
      
      // Delete: Only foremen can delete crews (soft delete via isActive flag)
      allow delete: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman';
    }
    
    // Crew members subcollection
    match /crews/{crewId}/members/{userId} {
      // Read: Only crew members can read member data
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid));
      
      // Create: Users can add themselves (join) or foremen can invite
      allow create: if isAuthenticated() &&
        (request.auth.uid == userId || // User joining themselves
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman')) &&
        request.resource.data.keys().hasAll(['userId', 'crewId', 'role', 'joinedAt', 'permissions', 'isAvailable', 'lastActive']) &&
        request.resource.data.userId == userId &&
        request.resource.data.crewId == crewId;
      
      // Update: Users can update their own data, foremen can update any member
      allow update: if isAuthenticated() &&
        (request.auth.uid == userId || // User updating themselves
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman')) &&
        request.resource.data.userId == userId && // Can't change user ID
        request.resource.data.crewId == crewId; // Can't change crew ID
      
      // Delete: Users can remove themselves, foremen can remove any member
      allow delete: if isAuthenticated() &&
        (request.auth.uid == userId || // User removing themselves
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman'));
    }
    
    // Tailboard activity subcollection
    match /crews/{crewId}/tailboard/activity/{activityId} {
      // Read: Only crew members can read activity
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid));
      
      // Create: Crew members can create activity items
      allow create: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
        request.resource.data.keys().hasAll(['actorId', 'type', 'timestamp', 'data']) &&
        request.resource.data.actorId == request.auth.uid;
      
      // Update/Delete: Only the actor or foremen can modify
      allow update, delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.actorId ||
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman'));
    }
    
    // Tailboard posts subcollection
    match /crews/{crewId}/tailboard/posts/{postId} {
      // Read: Only crew members can read posts
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid));
      
      // Create: Crew members can create posts
      allow create: if isAuthenticated() &&
        exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
        request.resource.data.keys().hasAll(['authorId', 'content', 'postedAt']) &&
        request.resource.data.authorId == request.auth.uid;
      
      // Update: Only the author or foremen can update
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.authorId ||
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman')) &&
        request.resource.data.authorId == resource.data.authorId && // Can't change author
        request.resource.data.postedAt == resource.data.postedAt; // Can't change post date
      
      // Delete: Only the author or foremen can delete
      allow delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.authorId ||
        (exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role == 'foreman'));
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Read: Sender, recipient, or crew members can read messages
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId ||
        (resource.data.crewId != null &&
         exists(/databases/$(database)/documents/crews/$(resource.data.crewId)/members/$(request.auth.uid))));
      
      // Create: Authenticated users can send messages
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['senderId', 'content', 'sentAt', 'type']) &&
        request.resource.data.senderId == request.auth.uid &&
        (request.resource.data.recipientId != null || request.resource.data.crewId != null) &&
        (request.resource.data.recipientId == null || request.resource.data.crewId == null); // Either DM or crew message, not both
      
      // Update: Only sender can edit their messages
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.senderId &&
        request.resource.data.senderId == resource.data.senderId && // Can't change sender
        request.resource.data.sentAt == resource.data.sentAt; // Can't change sent time
      
      // Delete: Only sender can delete their messages
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.senderId;
    }
  }
}
