rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role checking
    function isAuthenticated() {
      return request.auth != null;
    }

    function isForeman(crewId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/crews/$(crewId)) &&
             get(/databases/$(database)/documents/crews/$(crewId)).data.foremanId == request.auth.uid;
    }

    function isCrewMember(crewId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid));
    }

    function getMemberRole(crewId) {
      return get(/databases/$(database)/documents/crews/$(crewId)/members/$(request.auth.uid)).data.role;
    }

    function hasPermission(crewId, requiredPermission) {
      let role = getMemberRole(crewId);
      return (role == 'foreman' && requiredPermission in ['read', 'write', 'delete', 'manage']) ||
             (role == 'member' && requiredPermission in ['read', 'write']);
    }

    // Users collection: Authenticated users can read/write their own profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Crews collection: Role-based access control
    match /crews/{crewId} {
      allow read: if isCrewMember(crewId);
      allow create: if isAuthenticated() && request.auth.uid == request.data.foremanId;
      allow update: if isForeman(crewId) ||
                      (isCrewMember(crewId) && hasPermission(crewId, 'manage'));
      allow delete: if isForeman(crewId);
    }

    // Crew members subcollection
    match /crews/{crewId}/members/{memberId} {
      allow read: if isCrewMember(crewId);
      allow write: if isForeman(crewId) ||
                     (request.auth.uid == memberId && isCrewMember(crewId));
    }

    // Feed posts subcollection
    match /crews/{crewId}/feedPosts/{postId} {
      allow read: if isCrewMember(crewId);
      allow create: if isCrewMember(crewId);
      allow update, delete: if isCrewMember(crewId) &&
                               (request.auth.uid == resource.data.authorId ||
                                isForeman(crewId));
    }

    // Jobs collection: Public read, authenticated write
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() &&
                               (request.auth.uid == resource.data.authorId ||
                                (resource.data.crewId != null &&
                                 isForeman(resource.data.crewId)));
    }

    // Conversations collection
    match /conversations/{convId} {
      allow read, update: if isAuthenticated() &&
                             request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
    }

    // Messages subcollection
    match /conversations/{convId}/messages/{msgId} {
      allow read: if isAuthenticated() &&
                    request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
      allow create: if isAuthenticated() &&
                    request.auth.uid in get(/databases/$(database)/documents/conversations/$(convId)).data.participants;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;
    }

    // FIXED: Locals collection - Require authentication for ALL access
    match /locals/{localId} {
      allow read: if isAuthenticated();
      allow write: if false; // Read-only for authenticated users
    }

    // Counters collection: Authenticated users only
    match /counters/{document=**} {
      allow read, write: if isAuthenticated();
      allow delete: if false;
    }
  }
}