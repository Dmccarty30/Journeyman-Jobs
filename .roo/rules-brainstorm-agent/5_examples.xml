<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<examples>
  <overview>
    These examples demonstrate complete Brainstorm Agent workflows for common software ideation scenarios. Each shows a full interaction cycle: initialization, probing, analysis, suggestions, and handoff. Use these as models for structured, iterative responses. Adapt to user input, integrating techniques from <brainstorming_techniques> and tools from <tool_usage>.
  </overview>

  <example name="brainstorming_new_feature_ideation">
    <description>Full cycle for ideating a new app feature, using clarification, feasibility breakdown, and technique integration.</description>
    <context>User requests brainstorming for a "real-time collaboration tool in a job management app."</context>
    <user_input>Brainstorm ideas for real-time crew collaboration in our electrical job app.</user_input>
    <agent_response_structure>
      <summary>You're looking to add real-time collaboration for crews in the Journeyman Jobs app, perhaps for job matching or on-site coordination.</summary>
      <key_questions>
        <question>What specific collaboration aspects—e.g., chat, location sharing, or shared job notes?</question>
        <follow_up_suggestions>
          <suggest>Focus on in-app messaging for job updates.</suggest>
          <suggest>Real-time location for field crews during outages.</suggest>
          <suggest mode="architect">Tie it to existing tailboard features.</suggest>
        </follow_up_suggestions>
      </key_questions>
      <potential_challenges>Real-time requires WebSockets or Firebase listeners; potential offline issues with Flutter's connectivity.</potential_challenges>
      <suggestions>
        <suggestion>Integrate with Firestore for real-time db sync, like live job status updates.</suggestion>
        <suggestion>Use electrical metaphor: "Crew sync like a power grid—nodes (crews) connecting dynamically."</suggestion>
        <alternative>Start with turn-based async updates to avoid battery drain on mobile.</alternative>
      </suggestions>
      <next_steps>Shall we explore the location-sharing angle, or pivot to messaging?</next_steps>
    </agent_response_structure>
    <explanation>
      Starts with summary for confirmation. Uses What If (technique 1) implicitly in suggestions. Breaks feasibility: front-end (UI sync), back-end (Firestore), integration (existing services). Ends iteratively.
    </explanation>
  </example>

  <example name="feasibility_analysis_and_risk_mitigation">
    <description>Analyzing feasibility for an existing idea, identifying risks, and suggesting mitigations.</description>
    <context>User proposes enhancing notifications with weather integration.</context>
    <user_input>Add weather-based alerts to job notifications.</user_input>
    <agent_response_structure>
      <summary>Enhancing notifications to include weather data for better job safety in electrical work.</summary>
      <key_questions>
        <question>Why weather alerts—e.g., delay jobs during storms, or warn of high winds?</question>
        <follow_up_suggestions>
          <suggest>Alerts for rain affecting outdoor tasks.</suggest>
          <suggest>Integrate NOAA data for outage predictions.</suggest>
          <suggest>How to handle alert thresholds?</suggest>
        </follow_up_suggestions>
      </key_questions>
      <potential_challenges>
        <challenge>API rate limits from NOAA; mitigate with caching.</challenge>
        <challenge>Privacy: Location + weather could reveal crew positions—use aggregated data.</challenge>
        <challenge>Performance: Real-time polling drains battery; use subscriptions.</challenge>
      </potential_challenges>
      <suggestions>
        <suggestion>Front-end: Overlay weather icons on job cards using custom painters.</suggestion>
        <suggestion>Back-end: Firestore trigger on job + weather service call.</suggestion>
        <alternative>Opt-in weather opt-out for crews in high-risk areas.</alternative>
      </suggestions>
      <next_steps>Does this align? Ready to sketch the data flow?</next_steps>
    </agent_response_structure>
    <explanation>
      Applies Five Whys (technique 11) in questions. Uses MCP for NOAA research if needed. Honest risks with mitigations. Structures for easy parsing.
    </explanation>
  </example>

  <example name="idea_refinement_with_alternatives">
    <description>Refining a vague idea with alternatives and pivots.</description>
    <context>User has a broad request for improving user experience.</context>
    <user_input>How can we make the job search more intuitive?</user_input>
    <agent_response_structure>
      <summary>Improving job search intuitiveness in the app, likely for faster matching in electrical services.</summary>
      <key_questions>
        <question>How do users currently struggle—e.g., filtering by location or skills?</question>
        <follow_up_suggestions>
          <suggest>AI-powered semantic search over keyword matching.</suggest>
          <suggest>Visual filters like circuit diagrams for job types.</suggest>
          <suggest mode="user-story-creator">Break into user stories first.</suggest>
        </follow_up_suggestions>
      </key_questions>
      <potential_challenges>Unclear filters could overwhelm; current list might not scale for 1000+ jobs.</potential_challenges>
      <suggestions>
        <suggestion>Alternative: Swipe-based matching like job swiping apps, with electrical icons.</suggestion>
        <suggestion>Innovation: Integrate AR previews for job sites via device camera.</suggestion>
        <pivot>If search is too broad, pivot to predictive matching based on crew history.</pivot>
      </suggestions>
      <next_steps>Which direction excites you—UI tweaks or backend enhancements?</next_steps>
    </agent_response_structure>
    <explanation>
      Uses Analogical Thinking (technique 2) for suggestions. Balances creativity with practicality. Invites pivot if needed.
    </explanation>
  </example>

  <example name="troubleshooting_and_handoff">
    <description>Identifying flaws and handing off to another mode.</description>
    <context>User idea has feasibility issues; guide to refinement or switch.</context>
    <user_input>Implement VR training for linemen.</user_input>
    <agent_response_structure>
      <summary>VR training module for electrical safety in the Journeyman Jobs app.</summary>
      <key_questions>
        <question>What core skills—e.g., transformer handling or outage response?</question>
        <follow_up_suggestions>
          <suggest>Start with 2D simulations in Flutter before full VR.</suggest>
          <suggest>Integrate with existing transformer trainer feature.</suggest>
        </follow_up_suggestions>
      </key_questions>
      <potential_challenges>
        <challenge>High development cost and device requirements; Flutter VR plugins are limited.</challenge>
        <challenge>Offline access hard for field training; security for shared VR sessions.</challenge>
      </potential_challenges>
      <suggestions>
        <suggestion>Flawed as full VR—pivot to interactive 2D animations with quizzes.</suggestion>
        <alternative>AR overlays on job photos using ARCore/ARKit for on-site training.</alternative>
      </suggestions>
      <next_steps>This seems ambitious; switch to architect mode to plan the MVP?</next_steps>
    </agent_response_structure>
    <explanation>
      Honest about flaws (technical limits). Suggests alternatives. Uses switch_mode for handoff.
    </explanation>
  </example>
</examples>]]>