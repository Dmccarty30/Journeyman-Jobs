1. **App-Wide: Update Text Field Component for Copper Borders**
   - Modify the `JJTextField` widget in `lib/design_system/components/reusable_components.dart` to add copper borders using `AppTheme.accentCopper`.
   - Apply borders to all states: enabledBorder, focusedBorder, errorBorder, focusedErrorBorder.
   - Use `OutlineInputBorder` with appropriate widths (e.g., medium for enabled, thicker for focused) and radius from `AppTheme.radiusMd`.
   - Ensure this change applies consistently across the app, including auth and onboarding screens.
   - Reference: `lib/design_system/app_theme.dart` for colors and styles.

2. **Onboarding Screens: Add Electrical Circuit Background**
   - Add the electrical circuit background (`ElectricalCircuitBackground` or equivalent from `lib/electrical_components/circuit_board_background.dart` or `lib/widgets/`) to every onboarding screen, including Auth Screen and all Onboarding Steps Screens.
   - Wrap the Scaffold body in a Stack: bottom layer as the background with opacity 0.08 and high density; top layer as existing content.
   - Set Scaffold backgroundColor to `Colors.transparent`.
   - Ensure consistency with other app screens (e.g., jobs_screen.dart, home_screen.dart).

3. **Auth Screen: Add Copper Borders to Text Fields**
   - Ensure all text fields in signup and signin screens (using `JJTextField`) have copper borders. This should be handled automatically by Task 1, but verify in `lib/screens/onboarding/auth_screen.dart`.

4. **Auth Screen: Replace Tab Bar with Enhanced Version**
   - In `lib/screens/onboarding/auth_screen.dart`, replace the existing TabBar (around lines 195-210 or equivalent) with the custom `SegmentedTabBar` widget provided in "tab-bar-enhancement.md".
   - Add the full `SegmentedTabBar` class code after the `_AuthScreenState` class.
   - Update the tab bar usage to: `SegmentedTabBar(controller: _tabController, onTabChanged: (index) { setState(() {}); });`.
   - Maintain all original functionality (e.g., tab switching, controller logic).
   - If conflicts arise, integrate with existing imports and state management.
   - Note: Ignore any prior assumptions that the enhanced tab bar is already implemented; use the exact code from "tab-bar-enhancement.md".

5. **Onboarding Steps Screen - Step 1: Center Align Step Header**
   - In `lib/screens/onboarding/onboarding_steps_screen.dart`, center the `_buildStepHeader` in Step 1.
   - Wrap the `_buildStepHeader` call (around lines 386-390) in a `Center` widget, or modify the `_buildStepHeader` method (lines 972-1011) to use `CrossAxisAlignment.center` in its Column.
   - Reference the screenshot "assets/basic-info.png" to confirm alignment (use view_image tool if needed: image_url = "assets/basic-info.png").

6. **Onboarding Steps Screen: Add Copper Borders to All Text Fields**
   - Ensure all text fields across the entire `onboarding_steps_screen.dart` file (Steps 1-3) have copper borders. This should be handled automatically by Task 1, but verify in the file.

7. **Onboarding Steps Screen - Step 1: Adjust State Dropdown and Zip Code Layout**
   - In `_buildStep1()` (around lines 475-536), modify the Row for state and zip code.
   - Set the state dropdown's `Expanded` flex to 1 (half width).
   - Set the zip code text field's `Expanded` flex to 2 (expanded to fill remaining space).

8. **Onboarding Steps Screen - Step 1: Implement Next Button Functionality**
   - In `_nextStep()` (around lines 152-161), add logic before navigating for Step 1 (step 0).
   - Create a new method `_saveStep1Data()` to:
     - Get current user from `FirebaseAuth.instance.currentUser`.
     - Save partial user data (firstName, lastName, phone, address1, address2, city, state, zipcode) to Firestore using `FirestoreService().updateUser()` (or create if needed).
     - Show loading indicator, handle errors with snackbar.
     - Only navigate if save succeeds.
   - Import necessary files: `lib/services/firestore_service.dart`, `lib/models/user_model.dart`.
   - Ensure `_canProceed()` validation remains for Step 1.

9. **Onboarding Steps Screen - Step 2: Implement Next Button Functionality**
   - In `_nextStep()`, add logic before navigating for Step 2 (step 1).
   - Create a new method `_saveStep2Data()` to:
     - Update user document with Step 2 fields (homeLocal, ticketNumber, classification, isWorking, booksOn).
     - Use `FirestoreService().updateUser()` with user's UID.
     - Show loading indicator, handle errors.
     - Navigate to Step 3 only if save succeeds.

10. **Onboarding Steps Screen - Step 3: Implement Next Button Functionality**
    - In `_nextStep()` or `_completeOnboarding()` (around lines 172-251), ensure logic for Step 3 (step 2).
    - Update to save Step 3 fields (preferences, feedback, etc.) to user document.
    - Use `FirestoreService().updateUser()` or equivalent.
    - Mark onboarding complete, show success message, navigate to home screen.
    - Verify existing save logic is enhanced to include incremental updates from prior steps.

11. **Home Screen: Quick Actions and Suggested Jobs**
    - Review `lib/screens/home/home_screen.dart` for any pending changes related to Quick Actions and Suggested Jobs sections (TODO.md marks them but no details provided).
    - If no specific issues, add placeholders or confirm no action needed. Explore code if necessary for potential alignments or backgrounds.

12. **Job Screen: General Review**
    - Review `lib/screens/jobs/jobs_screen.dart` for any alignment, background, or border issues matching app theme.
    - Add electrical circuit background if missing.
    - Confirm no specific TODOs; implement if exploration reveals gaps.

13. **Storm Screen: General Review**
    - Review relevant storm screen file (e.g., `lib/screens/storm/storm_screen.dart`) for theme consistency.
    - Add background and borders as needed.

14. **Tailboard Screen: Subsections Review**
    - For Create Crews, Messages, Feed, Chat, Members: Review respective files (e.g., under `lib/screens/tailboard/`).
    - Add backgrounds, borders, and ensure navigation/functionality.
    - If empty in TODO.md, confirm no changes or add theme consistency.

15. **Locals Screen: General Review**
    - Review `lib/screens/locals/locals_screen.dart` for theme updates (background, borders).

16. **Settings Screen: General Review**
    - Review `lib/screens/settings/settings_screen.dart` for theme updates.

17. **Overall Verification and Testing**
    - After all changes, test navigation from Auth to Onboarding Steps to Home.
    - Verify data saving to Firestore across steps.
    - Ensure no regressions in functionality.
    - Use the Mermaid diagram from "plan-journeyman-job-tasks-0.md" as a reference for flow.