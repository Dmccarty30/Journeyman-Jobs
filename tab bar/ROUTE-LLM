### Summary

GOD — below is a focused, actionable, prioritized task list you can assign to your coding assistant. Tasks are drawn from TODO.md (primary), the planner (plan-journeyman-job-tasks-0.md), and the new tab bar widget (tab-bar-enhancement.md). Each task lists: file(s) to change, what to change, short implementation hints (small code examples where helpful), acceptance tests, and an estimated effort.

### Priority order

1. JJTextField: add copper borders (global visual change that impacts many screens)
2. Replace auth screen TabBar with SegmentedTabBar (the new UI you provided)
3. Auth screen: add ElectricalCircuitBackground and ensure copper borders on auth text fields
4. OnboardingStepsScreen: add background, center header, adjust layout (state/zip), implement Next button save/navigation for Steps 1–3
5. QA, tests, and PR checklist

---

### Task 1 — Add copper borders to the shared text-field component (global)

- Files to edit:
  - lib/design_system/components/reusable_components.dart (JJTextField)
- What to do:
  - Update JJTextField's InputDecoration to explicitly set:
    - enabledBorder, focusedBorder, errorBorder, focusedErrorBorder using OutlineInputBorder
    - Use your theme colors (AppTheme.accentCopper for normal/focused copper state, AppTheme.errorRed for error)
    - Keep existing radius and padding; only add/change borders
- Small example (pattern to use):

```dart
InputDecoration(
  filled: true,
  fillColor: AppTheme.white, // keep current
  enabledBorder: OutlineInputBorder(
    borderRadius: BorderRadius.circular(AppTheme.radiusMd),
    borderSide: BorderSide(color: AppTheme.accentCopper, width: AppTheme.borderWidthMedium),
  ),
  focusedBorder: OutlineInputBorder(
    borderRadius: BorderRadius.circular(AppTheme.radiusMd),
    borderSide: BorderSide(color: AppTheme.accentCopper, width: AppTheme.borderWidthCopper),
  ),
  errorBorder: OutlineInputBorder(
    borderRadius: BorderRadius.circular(AppTheme.radiusMd),
    borderSide: BorderSide(color: AppTheme.errorRed, width: AppTheme.borderWidthMedium),
  ),
  focusedErrorBorder: OutlineInputBorder(
    borderRadius: BorderRadius.circular(AppTheme.radiusMd),
    borderSide: BorderSide(color: AppTheme.errorRed, width: AppTheme.borderWidthCopper),
  ),
  // keep prefix/suffix icons, hintText, contentPadding, etc.
);
```

- References (how to control TextField borders):
  - Flutter docs: OutlineInputBorder — <https://api.flutter.dev/flutter/material/OutlineInputBorder-class.html>
  - Practical example: StackOverflow (enabledBorder/focusedBorder usage) — <https://stackoverflow.com/questions/54143526/flutter-outline-input-border>
- Acceptance tests:
  - Verify in auth screen and onboarding screens that every text field shows copper outline when enabled and thicker copper on focus.
  - Validate error states still show AppTheme.errorRed border.

Estimated effort: 1–2 hours.

---

### Task 2 — Replace existing TabBar with the provided SegmentedTabBar

- Files to edit:
  - lib/screens/onboarding/auth_screen.dart (or file where current TabBar lives)
- What to do:
  - Remove/replace the existing TabBar widget code and insert the SegmentedTabBar widget class you provided (the full class from tab-bar-enhancement.md).
  - Add SegmentedTabBar instantiation in place of the old TabBar: pass the existing TabController (or create it in the same stateful widget).
  - Ensure the controller/listeners are wired the same as before so TabBarView still shows correct pages.
  - Move the new SegmentedTabBar class into the same file (near bottom) or into a small widget file (e.g., lib/widgets/segmented_tab_bar.dart) and import it.
- Important fixes in the provided code (apply these before committing):
  - Replace any invalid literal uses (e.g., height: '44%' in the divider) with numeric values (e.g., height: 24).
  - Ensure MediaQuery offset calculations match the container horizontal margin so the animated indicator positions correctly.
  - Confirm AppTheme constants exist (accentCopper, primaryNavy, etc.) — if not, adapt to real names.
- Quick replacement snippet:

```dart
// where the old TabBar was
SegmentedTabBar(
  controller: _tabController,
  onTabChanged: (index) => setState(() {}),
),
```

- Acceptance tests:
  - Tapping tabs animates the indicator and switches content.
  - Visuals match the new design (gradient indicator, copper border).
  - No regressions in sign-up/sign-in flows (forms still validate and submit).
- Estimated effort: 2–4 hours (depending on corrections noted above).

---

### Task 3 — Auth screen: circuit background + text-field copper borders

- Files to edit:
  - lib/screens/onboarding/auth_screen.dart
- What to do:
  - Import and wrap the main body with ElectricalCircuitBackground (use the same wrapper and parameters used elsewhere in the app: opacity: 0.08, density: high).
  - Set Scaffold backgroundColor to Colors.transparent (so the circuit shows).
  - Ensure JJTextField changes from Task 1 apply here (no additional per-field changes necessary if JJTextField is used everywhere).
- Acceptance tests:
  - Circuit background visible through screen (correct opacity).
  - Auth text fields show copper borders.
  - Sign-up / sign-in flows still work.
- Estimated effort: 30–60 minutes.

---

### Task 4 — OnboardingStepsScreen: background, header alignment, layout, and Next button persistence + navigation

- Files to edit:
  - lib/screens/onboarding/onboarding_steps_screen.dart
  - Possibly lib/services/firestore_service.dart (if helpers for updateUser/createUser missing) and lib/models/user_model.dart (confirm fields)
- What to do (subtasks):
  A. Add ElectricalCircuitBackground and make Scaffold transparent (same pattern as auth screen).
  B. Center the buildStepHeader for Step 1:
  - Either wrap the call to _buildStepHeader(...) in Center, or change the_buildStepHeader Column to crossAxisAlignment: CrossAxisAlignment.center.
  C. Adjust State dropdown + Zip code layout:
  - Locate Row where state dropdown and zip code fields are placed.
  - Change flex values: state dropdown flex:1, zipcode flex:2 (or otherwise make state half width).
  D. Wire Next button on each step to persist data:
  - Create private helpers: _saveStep1Data(),_saveStep2Data(), _saveStep3Data() (or one_savePartialUser(stepIndex))
  - Use FirebaseAuth.instance.currentUser to get uid.
  - Use FirestoreService().updateUser(uid, dataMap) to persist partial fields.
  - Show loading indicator while saving; on success navigate to next step/pageController.nextPage(...); on failure show JJSnackBar error.
  - For Step 3 (complete), call createUser or finalize user doc and then navigate to Home screen.
  E. Adjust _canProceed() and Next button state if any validation is required.
- Patterns/snippet for saving (use exactly the Firestore helper functions you have; below is a pattern):

```dart
Future<bool> _saveStep1Data() async {
  final user = FirebaseAuth.instance.currentUser;
  if (user == null) return false;
  final data = {
    'firstName': _firstNameController.text.trim(),
    'lastName': _lastNameController.text.trim(),
    'phoneNumber': _phoneController.text.trim(),
    'address1': _address1Controller.text.trim(),
    'address2': _address2Controller.text.trim(),
    'city': _cityController.text.trim(),
    'state': _stateController.text.trim(),
    'zipcode': _zipcodeController.text.trim(),
  };
  await FirestoreService().updateUser(uid: user.uid, data: data);
  return true;
}
```

- Acceptance tests:
  - Next button on Step 1 saves data and navigates to Step 2.
  - Next on Step 2 saves and navigates to Step 3.
  - Complete on Step 3 finalizes user doc and navigates to Home.
  - Data persisted correctly in Firestore (verify fields exist/updated).
  - Form validation blocks navigation when required fields invalid.
- Estimated effort: 4–8 hours (depending on existing Firestore helpers and any model mismatches).

---

### Task 5 — Small UI fixes & polish

- Files:
  - Various screens referenced in TODO.md (home, jobs, others) — only minimal notes, implement later.
- What to do:
  - Ensure onboarding screens use copper border everywhere (JJTextField fix covers most).
  - Fix any layout issues surfaced during dev (padding, alignment).
  - Ensure all changes respect accessibility (tap targets, contrast).
- Acceptance tests:
  - Visual consistency across onboarding and auth screens.
- Estimated effort: 1–3 hours.

---

### Task 6 — Tests, QA checklist, and PR

- Automated / Manual checks:
  - Unit tests where possible (e.g., Firestore service update functions mocked).
  - Widget tests for onboarding step navigation (pushing next triggers save and page change).
  - Manual QA steps (list):
    1. Launch app: open auth screen — validate segmented tab bar functions.
    2. Try sign-up/sign-in flows (happy path).
    3. Start onboarding: Step 1 — fill values and press Next — check Firestore contents.
    4. Repeat for Steps 2 and 3.
    5. Check all text fields show copper border and focus border width increases on focus.
    6. Check circuit background visible with correct opacity.
- PR description template:
  - Summary of changes
  - Files modified
  - How to test locally (setup: emulator/real device, firebase config)
  - Any migration notes (e.g., if app_theme constant names changed)
- Estimated effort: 1–2 hours.

---

### Implementation notes / gotchas

- Ensure AppTheme constants used in tab-bar code (accentCopper, secondaryCopper, primaryNavy, border widths) match current app_theme names. If they differ, either add aliases or adapt to existing names.
- The SegmentedTabBar code from tab-bar-enhancement.md contains a few small issues (e.g., using a string for height). The coding assistant should lint and fix minor typos before integration.
- If Firestore functions in services expect different parameter shapes, adapt the data map accordingly.
- If JJTextField isn't used in some forms (raw TextField used directly), update those occurrences or replace with JJTextField for consistency.

---

### Deliverables to request from the coding assistant

1. PR with commits grouped by task (JJTextField change; SegmentedTabBar + auth_screen updates; onboarding steps save/navigation).
2. Short test plan and the results (one-line per test from QA checklist).
3. Screenshots or short GIFs showing:
   - Tab bar animation working
   - Copper borders in focus/non-focus
   - Circuit background visible on auth/onboarding screens
4. If any constants added to AppTheme or models updated, include a summary in PR.

---

If you want, I can:

- Produce the exact diff/patch for each file mentioned (I will need to load the specific code files — tell me which file to edit first), or
- Prepare a ready-to-paste corrected SegmentedTabBar widget with the minor fixes (replace '44%' and ensure correct offset math) so the assistant can paste it straight in.

Which of these should I do next?
